CREATE TABLE player (
    player_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    position VARCHAR2(50),
    height NUMBER
);
INSERT INTO player (position, height) VALUES ('Forward', 180);
INSERT INTO player (position, height) VALUES ('Forward', 185);
INSERT INTO player (position, height) VALUES ('Forward', 175);
INSERT INTO player (position, height) VALUES ('Midfielder', 170);
INSERT INTO player (position, height) VALUES ('Midfielder', 175);
INSERT INTO player (position, height) VALUES ('Defender', 190);
INSERT INTO player (position, height) VALUES ('Defender', 195);
INSERT INTO player (position, height) VALUES ('Defender', 180);
INSERT INTO player (position, height) VALUES ('Goalkeeper', 195);
INSERT INTO player (position, height) VALUES ('Goalkeeper', 198);

SELECT * FROM player;
-- ----------------------------------------------------------------------
SELECT position '포지션', AVG(height) '평균키'
FROM player;
-- Error, 단일 그룹의 집계 함수 아님

SELECT position '포지션', AVG(height) '평균키'
FROM player
GROUP BY position '포지션';
-- Error, group by 에서 alias ('포지션') 사용하면 불가.

SELECT position as 포지션, AVG(height) as 평균키
from player
group by position;

SELECT
	position AS "포지션",
	COUNT(*) AS "인원수",
	COUNT(height) AS "키 대상",
	MAX(height) AS "최대 키",
	MIN(height) AS "최소 키",
	ROUND(AVG(height), 2) AS "평균 키"
FROM player
GROUP BY position;

-- 정상 출력(조회) 가능
-- --------------------------------------------------------

CREATE TABLE pokemon (
  pm_id NUMBER PRIMARY KEY NOT NULL,
  name VARCHAR2(20) NOT NULL,
  attr VARCHAR2(20) DEFAULT 'normal',
	weight NUMBER
);
INSERT INTO pokemon VALUES (1, 'Bulbasaur', 'grass', 30);
INSERT INTO pokemon VALUES (2, 'Ivysaur', 'grass', 50);
INSERT INTO pokemon VALUES (3, 'Venusaur', 'grass', 150);
INSERT INTO pokemon VALUES (4, 'Charmander', 'Fire', 80);
INSERT INTO pokemon VALUES (5, 'Charmeleon', 'Fire', 200);
INSERT INTO pokemon VALUES (25, 'Pikachu', 'Electric', 15);
INSERT INTO pokemon (pm_id, name) VALUES (86, 'Seel');

SELECT * FROM pokemon;

SELECT attr, round(AVG(weight),0) as "avg_weight"
FROM pokemon
group by attr;

-- --------------------------------------------------------
Drop table pokemon;
CREATE TABLE pokemon (
  pm_id NUMBER PRIMARY KEY NOT NULL,
  name VARCHAR2(20) NOT NULL,
  attr VARCHAR2(20),
	weight VARCHAR2(20)
);
INSERT INTO pokemon VALUES (1, 'Bulbasaur', 'Grass', '30');
INSERT INTO pokemon VALUES (4, 'Charmander', 'Fire', '80');
INSERT INTO pokemon VALUES (25, 'Pikachu', 'Electric', '15');
INSERT INTO pokemon (pm_id, name) VALUES (54, 'Psyduck');
INSERT INTO pokemon (pm_id, name, attr) VALUES (76, 'Golem', 'Rock');
INSERT INTO pokemon (pm_id, name, weight) VALUES (86, 'Seel', '85');

SELECT attr, AVG(weight) as "avg_weight"
FROM pokemon
group by attr;

SELECT attr, (weight) as "avg_weight"
FROM pokemon
group by attr
HAVING attr is not null;

-- --------------------------------------------------------------
CREATE TABLE student (
  id NUMBER,
  class NUMBER,
  score NUMBER
);
INSERT INTO student VALUES (1, 1, 10);
INSERT INTO student VALUES (2, 1, 10);
INSERT INTO student VALUES (3, 1, 10);
INSERT INTO student VALUES (4, 1, 10);
INSERT INTO student VALUES (5, 1, 10);
INSERT INTO student VALUES (6, 1, 10);
INSERT INTO student VALUES (7, 1, 10);
INSERT INTO student VALUES (8, 1, 10);
INSERT INTO student VALUES (9, 1, null);
INSERT INTO student VALUES (10, 1, null);

SELECT 
	class,
    AVG(score),
    count(score),
    count(*)
FROM student
GROUP BY class;

-- --------------------------------------------------------------
CREATE TABLE pokemon (
  pm_id NUMBER PRIMARY KEY NOT NULL,
  name VARCHAR2(20) NOT NULL,
  attr VARCHAR2(20) DEFAULT 'normal',
	height NUMBER
);
INSERT INTO pokemon VALUES (1, 'Bulbasaur', 'grass', 50);
INSERT INTO pokemon VALUES (2, 'Ivysaur', 'grass', 90);
INSERT INTO pokemon VALUES (3, 'Venusaur', 'grass', 250);
INSERT INTO pokemon VALUES (4, 'Charmander', 'Fire', 80);
INSERT INTO pokemon VALUES (5, 'Charmeleon', 'Fire', 120);
INSERT INTO pokemon VALUES (25, 'Pikachu', 'Electric', 50);

SELECT * FROM pokemon;

SELECT name, height
FROM pokemon
ORDER BY height DESC, name ASC;

-- --------------------------------------------------------------
/* 실행 순서
1. FROM  : 발췌대상 테이블 참조
2. WHERE : 발췌 대상 데이터 찾음
3. GROUP BY : 행동들을 소그룹화
4. HAVING : 그룹핑된 값의 조건에 맞는 것만을 출력
5. SELECT : 데이터 값을 출력/계산
6. ORDER BY : 데이터를 순서대로 정렬
*/
-- --------------------------------------------------------------

CREATE TABLE emp (
    empno NUMBER,
    ename VARCHAR2(50),
    job VARCHAR2(50),
    mgr NUMBER,
    hiredate DATE,
    sal NUMBER,
    deptno NUMBER
);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7839, 'KING', 'PRESIDENT', NULL, TO_DATE('1981-11-17', 'YYYY-MM-DD'), 5000, 10);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7566, 'JONES', 'MANAGER', 7839, TO_DATE('1981-04-02', 'YYYY-MM-DD'), 2975, 20);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7698, 'BLAKE', 'MANAGER', 7839, TO_DATE('1981-05-01', 'YYYY-MM-DD'), 2850, 30);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7782, 'CLARK', 'MANAGER', 7839, TO_DATE('1981-06-09', 'YYYY-MM-DD'), 2450, 10);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7902, 'FORD', 'ANALYST', 7566, TO_DATE('1981-12-03', 'YYYY-MM-DD'), 3000, 20);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7369, 'SMITH', 'CLERK', 7902, TO_DATE('1980-12-17', 'YYYY-MM-DD'), 800, 20);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7521, 'WARD', 'SALESMAN', 7698, TO_DATE('1981-02-22', 'YYYY-MM-DD'), 1250, 30);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7654, 'MARTIN', 'SALESMAN', 7698, TO_DATE('1981-09-28', 'YYYY-MM-DD'), 1250, 30);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7844, 'TURNER', 'SALESMAN', 7698, TO_DATE('1981-09-08', 'YYYY-MM-DD'), 1500, 30);
INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, deptno) VALUES (7900, 'JAMES', 'CLERK', 7698, TO_DATE('1981-12-03', 'YYYY-MM-DD'), 950, 30);

SELECT * FROM emp;

SELECT job, sal FROM emp GROUP BY job HAVING COUNT(*) > 0 ORDER BY sal;
-- > Error 발생, sal 은 GROUP BY로 job 이 그룹화 될 것이기 때문에
-- 일반 칼럼 sal 사용으로 에러가 발생
SELECT job FROM emp GROUP BY job HAVING COUNT(*) > 0 ORDER BY sal;
-- > Error 발생, ORDER BY 에서 일반 칼럼 sal 을 사용함
SELECT job FROM emp GROUP BY job HAVING COUNT(*) > 0
ORDER BY MAX(empno), MAX(mgr), SUM(sal), COUNT(deptno), MAX(hiredate);
-- > 정상 조회 가능, ORDER BY 에서 집계 함수를 이용한 정렬은 가능함

-- rownum : 조회된 데이터에 번호를 매겨 원하는 개수의 데이터를 가져올 수 있다.
-- 주의사항 : 정렬이 완료되고 데이터의 일부가 rownum으로 추출되는 것이 아니라
-- where 절에 작성된 rownum으로 데이터의 일부가 먼저 추출이 되고 나중에 데이터의 정렬 작업이 일어난다.

SELECT ename
FROM emp 
WHERE rownum < 4 
ORDER BY sal DESC;
-- sal 이 제일 높은 3개의 데이터를 조회하는 것이 아닌
-- 3개를 랜덤하게 가져온 후 정렬을 하게 됨

-- --------------------------------------------------------------
/*
다음 포켓몬 데이터에서 키가 가장 작은 포켓몬의 이름, 속성, 그리고 키를 3개만 조회해주세요. 
이때 동일한 데이터 중복으로 같은 데이터가 있는 경우에도 같이 출력해주세요.
*/
CREATE TABLE pokemon (
  pm_id NUMBER PRIMARY KEY NOT NULL,
  name VARCHAR2(20) NOT NULL,
  attr VARCHAR2(20) DEFAULT 'normal',
	height NUMBER
);
INSERT INTO pokemon VALUES (1, 'Bulbasaur', 'grass', 50);
INSERT INTO pokemon VALUES (2, 'Ivysaur', 'grass', 90);
INSERT INTO pokemon VALUES (3, 'Venusaur', 'grass', 250);
INSERT INTO pokemon VALUES (4, 'Charmander', 'Fire', 80);
INSERT INTO pokemon VALUES (5, 'Charmeleon', 'Fire', 120);
INSERT INTO pokemon VALUES (25, 'Pikachu', 'Electric', 50);
INSERT INTO pokemon VALUES (86, 'Seel', 'Ice', 80);

select * from pokemon;

select
name,
attr,
height
from pokemon
where rownum < 4
order by height, name;

